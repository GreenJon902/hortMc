#version 460 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Camera {
    float x;
    float y;
    float z;
    float yaw;
    float pitch;
    int fov_x;
    int fov_y;
    float near_clip;
};

struct Ray {
    vec3 pos;
    vec2 dir;  // Change in position after 1 block
};

layout(std430, binding = 0) buffer CameraBuffer {
    Camera camera;
};

writeonly uniform image2D OutputTexture;

Ray makeRay() {
    // Calculate size of projection plane
    float planeHeight = camera.near_clip * tan(radians(float(camera.fov_y) * 0.5)) * 2;
    float planeWidth = camera.near_clip * tan(radians(float(camera.fov_x) * 0.5)) * 2;
    // Bottom left corner of the plane (in camera's local space)
    vec3 bottomLeftLocal = vec3(-planeWidth / 2, -planeHeight / 2, camera.near_clip);

    vec2 t = gl_GlobalInvocationID.xy / gl_NumWorkGroups.xy;  // 0 = bottom / left, 1 = top / right

    //https://youtu.be/Qz0KTGYJtUk?t=129
    vec3 pointLocal = bottomLeftLocal + vec3(planeWidth * t.x, planeHeight * t.y, 0);
    vec3 point = pointLocal + vec3(camera.x, camera.y, camera.z);
    vec3 dir = normalize(point - vec3(camera.x, camera.y, camera.z));
}

void main() {
    ivec2 image_pixel_position = ivec2(gl_GlobalInvocationID.xy);


}