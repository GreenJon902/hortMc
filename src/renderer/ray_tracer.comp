#version 460 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Ray {
    vec3 pos;
    vec3 dir;
};

struct Material {
    vec3 color;  // Should be 1 or bellow as doesn't emit light
    float emission;  // This multiplied by color makes light emission
    float specularProbability;
    float smoothness;
};

layout (std140) uniform CameraBlock {
    vec3 camera_pos;
    mat3 camera_rot_mat;
    vec2 fov;
};

writeonly uniform image2D outputTexture;


vec3 get_local_ray_direction(vec2 pos, vec2 size) {  // For when fov is higher than 180. This causes visual distortion
    vec2 angle = (pos / size - 0.5) * radians(fov);
    vec3 dir = vec3(sin(angle.x) * cos(angle.y), sin(angle.y), cos(angle.x) * cos(angle.y));
    return normalize(dir);
}

#define PI 3.1415926535897932
vec3 perspective_projection(vec2 pos, vec2 size) {
    vec2 fov = vec2(90, 90);

    float aspect_ratio = size.x / size.y;
    float theta_h = fov.x / 2 * PI / 180;
    float theta_v = fov.y / 2 * PI / 180;

    float ndc_x = (2 * pos.x + 1) / size.x - 1;
    float ndc_y = 1 - (2 * pos.y + 1) / size.y;

    float tan_theta_h = tan(theta_h);
    float tan_theta_v = tan(theta_v);

    float distance_ = 0.5 / max(tan_theta_h / aspect_ratio, tan_theta_v);

    vec3 direction_camera = vec3(ndc_x * aspect_ratio * tan_theta_h, -ndc_y * tan_theta_v, 1.0);
    direction_camera = normalize(direction_camera);

    return normalize(direction_camera);
}

Ray make_ray() {
    ivec2 image_position = ivec2(gl_GlobalInvocationID.xy);  // pos on image
    ivec2 image_size = ivec2(gl_NumWorkGroups.xy);  // pos on image

    vec3 ray_direction = perspective_projection(image_position, image_size);
    ray_direction = camera_rot_mat * ray_direction; // apply camera rotation
    ray_direction = normalize(ray_direction);
    return Ray(camera_pos, ray_direction);
}

float min3(vec3 v) {
    return min(min(v.x, v.y), v.z);
}

float max3(vec3 v) {
    return max(max(v.x, v.y), v.z);
}

bool hasInteger(vec3 v) {
    return any(equal(fract(v), vec3(0.0)));
}

#define epsilon 0.0001

Ray step_block(Ray ray) {
    //if (hasInteger(ray.pos)) {  // Effectively garunteed so just do it anyway.
        ray.pos += ray.dir * epsilon;
    //}
    int loops = 0;
    while (!hasInteger(ray.pos) && loops < 3) {  // Protection to stop infinite looping
        loops += 1;
        float x = ray.pos.x;
        float y = ray.pos.y;
        float z = ray.pos.z;
        float dx = ray.dir.x;
        float dy = ray.dir.y;
        float dz = ray.dir.z;
        vec3 times = vec3(dx > 0 ? ((ceil(x) - x) / dx) : ((x - floor(x)) / abs(dx)),
                          dy > 0 ? ((ceil(y) - y) / dy) : ((y - floor(y)) / abs(dy)),
                          dz > 0 ? ((ceil(z) - z) / dz) : ((z - floor(z)) / abs(dz)));
        float time = min3(times);
        ray.pos += ray.dir * time;
    }

    return ray;
}

uint get_block_at(ivec3 pos) {
    uint world[10][10][10];  // Initialises to 0s (air)
    ivec3 world_start = ivec3(-5, -7, -5);  // Offset of world array from 0,0,0

    world[4][4][4] = 2; // Floor
    world[4][4][5] = 2;
    world[4][4][6] = 2;
    world[5][4][4] = 2;
    world[5][4][5] = 3;
    world[5][4][6] = 2;
    world[6][4][4] = 2;
    world[6][4][5] = 2;
    world[6][4][6] = 2;
    world[4][5][7] = 1; // Wall
    world[5][5][7] = 2;
    world[6][5][7] = 1;
    world[4][6][7] = 1;
    world[5][6][7] = 1;
    world[6][6][7] = 1;
    world[4][7][7] = 2;
    world[5][7][7] = 2;
    world[6][7][7] = 2;

    pos -= world_start;
    if (any(lessThan(pos, ivec3(0, 0, 0))) || any(greaterThan(pos, ivec3(9, 9, 9)))) {  // Out of bounds of world
        return 0;
    }
    return world[pos.x][pos.y][pos.z];
}

uint checkBlockCollistion(Ray ray) {  // Returns a block id if collided (collided means one coord is int)
    ivec3 pos = ivec3(floor(ray.pos));
    pos -= (ivec3(equal(fract(ray.pos), vec3(0, 0, 0))) * ivec3(lessThan(ray.dir, vec3(0, 0, 0))));
    return get_block_at(pos);
}

uint NextRandom(uint state) {
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}

float RandomValue(uint state) {
    return float(NextRandom(state)) / 4294967295.0; // 2^32 - 1
}

float RandomValueNormalDistribution(uint state) {
    float theta = 2 * 3.1415926 * RandomValue(state);
    float rho = sqrt(float(-2 * log(RandomValue(state))));
    return rho * cos(theta);
}

vec3 RandomDirection(uint state) {
    float x = RandomValueNormalDistribution(state);
    float y = RandomValueNormalDistribution(state);
    float z = RandomValueNormalDistribution(state);
    return normalize(vec3(x, y, z));
}



#define max_collisions 10
void main() {
    int Frame = 2;

    uvec2 numPixels = gl_NumWorkGroups.xy;
    uvec2 pixelCoord = gl_GlobalInvocationID.xy;
    uint pixelIndex = pixelCoord.y * numPixels.x + pixelCoord.x;
    uint rngState = pixelIndex + Frame * 719393;

    ivec2 image_position = ivec2(gl_GlobalInvocationID.xy);  // Our position on image in pixels
    Ray ray = make_ray();

    //imageStore(outputTexture, image_position, vec4(ray.dir, 1));
    //return;
    Material pallet[] = {
            Material(vec3(0, 0, 0), 0, 0, 0),  // Air is ignored
            Material(vec3(0.2, 0.2, 0.2), 0, 0, 0),  // Stone
            Material(vec3(0, 1, 0), 0, 1, 1),  // Grass
            Material(vec3(1, 1, 0.7), 1, 0, 0),  // Light
    };

    Material collision_materials[max_collisions];
    int i = 0;
    for (int n=0; n<10; n++) {  // n meaning step number
        ray = step_block(ray);
        uint block_id = checkBlockCollistion(ray);

        if (block_id != 0) {  // Ignore air
            collision_materials[i] = pallet[block_id];
            i += 1;
            if (i >= max_collisions) break;
            //if (fract(ray.pos.z) == 0) {
                /*vec3 n = vec3(equal(fract(ray.pos), vec3(0, 0, 0)));
                vec3 i = ray.dir;
                ray.dir = i - 2 * (dot(n, i)) * n;
                ray.dir = ray.dir + pallet[block_id].specularity * (max(vec3(0), camera_pos));*/

                // ray.dir.z *= (-1 * vec3(equal(fract(ray.pos), vec3(0, 0, 0)))).z + pallet[block_id].specularity * pow(randomVectorBetweenOnes(), vec3(3)).z * 45;
                /*vec3 N = vec3(0, 0, -1);
                vec3 L = ray.dir;
                vec3 R = 2 * N * (N * L) - L;
                vec3 V = -L;
                vec3 H = normalize(L + V);
                float specular = pow(max(dot(N, H), 0.0), pallet[block_id].shininess);
                R = mix(R, H, specular * pallet[block_id].specularity);
                ray.dir = normalize(R);*/
                /*vec3 normal = (normalize(
                    vec3(equal(fract(ray.pos), vec3(0, 0, 0))) * vec3(greaterThan(ray.dir, vec3(0, 0, 0)))
                ) + 0.5)* -2;  // Normal on plane that collided with

                vec3 diffuseDir = normalize(normal + RandomDirection());
                //diffuseDir = ray.dir;
                //diffuseDir.z *= -1;
                vec3 specularDir = normalize(ray.dir * (-2 * vec3(equal(fract(ray.pos), vec3(0, 0, 0))) + 1));
                ray.dir = normalize(mix(diffuseDir, specularDir, pallet[block_id].smoothness));*/

                bool isSpecularBounce = collision_materials[i].specularProbability >= RandomValue(rngState);

                vec3 diffuseDir = normalize(-vec3(equal(fract(ray.pos), vec3(0, 0, 0))) + RandomDirection(rngState));
                vec3 specularDir = reflect(ray.dir, -vec3(equal(fract(ray.pos), vec3(0, 0, 0))));
                ray.dir = normalize(mix(diffuseDir, specularDir, collision_materials[i].smoothness * int(isSpecularBounce)));
            //}
        }
    }

    vec3 color;
    if (i == 0) {
        color = vec3(0.7, 0.7, 1);  // Ambient Color
    } else {
        color = vec3(0, 0, 0);  // We wait till hit light source
        while (i > 0) {
            i -= 1;
            color = color * collision_materials[i].color + collision_materials[i].emission * collision_materials[i].color;
        }
    }
    imageStore(outputTexture, image_position, vec4(color, 1));
    //imageStore(outputTexture, image_position, vec4(RandomDirection(), 1));
}



/*
vec3 equi_angular_projection(vec2 pos, vec2 size) { // Image coorinates to local ray direction.
                                                  // Supports infinite fov (horizontal).
    vec2 ndc = vec2(2.0 * pos.x / size.x - 1.0, 2.0 * pos.y / size.y - 1.0);

    float r = length(ndc);
    float phi = atan(r * tan(radians(float(fov)) / 2.0));

    vec3 dir = vec3(ndc, cos(phi));
    return normalize(dir);
}


vec3 cube_map_projection(vec2 pos, vec2 size) {
    vec2 fov = vec2(720, 90);

    vec2 uv = (pos + 0.5) / size;
    float aspect_ratio = size.x / size.y;
    float ndc_x = (2.0 * uv.x - 1.0) * aspect_ratio;
    float ndc_y = 1.0 - 2.0 * uv.y;

    vec2 tan_half_fov = tan(fov / 2);
    vec3 dir = normalize(vec3(ndc_x * tan_half_fov.x, ndc_y * -tan_half_fov.y, 1.0));
    return dir;
}

vec3 sphere_map_projection(vec2 pos, vec2 size) {
    vec2 fov = vec2(radians(90.), radians(90.));

    // Calculate angle away from camera forward (but camera local)
    float theta_x = (2 * atan(tan(fov.x / 2) * (pos.x - (size.x / 2)) / (size.x / 2))) - (fov.x / 2);
    float theta_y = (2 * atan(tan(fov.y / 2) * ((size.y / 2) - pos.y) / (size.y / 2))) - (fov.y / 2);

    float dir_x = sin(theta_x) * cos(theta_y);
    float dir_y = sin(theta_y);
    float dir_z = cos(theta_x) * cos(theta_y);
    vec3 dir = vec3(dir_x, dir_y, dir_z);
    return normalize(dir);
}

#define PI 3.1415926535897932
vec3 perspective_projection(vec2 pos, vec2 size) {
    vec2 fov = vec2(360, 90);

    float aspect_ratio = size.x / size.y;
    float theta_h = fov.x / 2 * PI / 180;
    float theta_v = fov.y / 2 * PI / 180;

    float ndc_x = (2 * pos.x + 1) / size.x - 1;
    float ndc_y = 1 - (2 * pos.y + 1) / size.y;

    float tan_theta_h = tan(theta_h);
    float tan_theta_v = tan(theta_v);

    float distance_ = 0.5 / max(tan_theta_h / aspect_ratio, tan_theta_v);

    vec3 direction_camera = vec3(ndc_x * aspect_ratio * tan_theta_h, -ndc_y * tan_theta_v, 1.0);
    direction_camera = normalize(direction_camera);

    return normalize(direction_camera);
}
*/